#!/usr/bin/env python3\n\"\"\"\n一致性检查器演示脚本\n展示如何使用一致性检查器进行人名、术语、称谓的一致性检查\n\"\"\"\nimport asyncio\nimport json\nfrom datetime import datetime\nfrom agents.consistency_checker import (\n    ConsistencyChecker, ConsistencyCheckRequest, ConsistencyRule,\n    ConsistencyType, ConflictSeverity, ResolutionStrategy\n)\n\n\nasync def create_demo_episodes():\n    \"\"\"创建演示集数据\"\"\"\n    return [\n        {\n            \"episode_id\": \"episode_1\",\n            \"title\": \"爱上海军蓝 - 第1集\",\n            \"subtitles\": [\n                {\"text\": \"欢迎收看，我是主持人张伟。\"},\n                {\"text\": \"今天我们邀请到了海军司令李明将军。\"},\n                {\"text\": \"司令，请您介绍一下我们的雷达系统。\"},\n                {\"text\": \"这套雷达系统采用了最新的技术。\"},\n                {\"text\": \"张伟，这个系统确实很先进。\"}\n            ],\n            \"translations\": {\n                \"en\": [\n                    {\"translated_text\": \"Welcome, I'm host Zhang Wei.\"},\n                    {\"translated_text\": \"Today we invited Navy Commander Li Ming.\"},\n                    {\"translated_text\": \"Commander, please introduce our radar system.\"},\n                    {\"translated_text\": \"This radar system uses the latest technology.\"},\n                    {\"translated_text\": \"Zhang Wei, this system is indeed advanced.\"}\n                ],\n                \"ja\": [\n                    {\"translated_text\": \"ようこそ、司会の張偉です。\"},\n                    {\"translated_text\": \"今日は海軍司令官の李明将軍をお招きしました。\"},\n                    {\"translated_text\": \"司令官、我々のレーダーシステムについて紹介してください。\"},\n                    {\"translated_text\": \"このレーダーシステムは最新の技術を使用しています。\"},\n                    {\"translated_text\": \"張偉さん、このシステムは確かに先進的ですね。\"}\n                ]\n            }\n        },\n        {\n            \"episode_id\": \"episode_2\",\n            \"title\": \"爱上海军蓝 - 第2集\",\n            \"subtitles\": [\n                {\"text\": \"张伟继续主持节目。\"},\n                {\"text\": \"李明司令详细介绍了雷达技术。\"},\n                {\"text\": \"这个雷达系统非常先进。\"},\n                {\"text\": \"海军的装备越来越现代化了。\"},\n                {\"text\": \"感谢李将军的精彩介绍。\"}\n            ],\n            \"translations\": {\n                \"en\": [\n                    {\"translated_text\": \"Zhang Wei continues hosting the show.\"},\n                    {\"translated_text\": \"Commander Li Ming detailed the radar technology.\"},\n                    {\"translated_text\": \"This radar system is very advanced.\"},\n                    {\"translated_text\": \"The Navy's equipment is becoming more modern.\"},\n                    {\"translated_text\": \"Thank you General Li for the wonderful introduction.\"}\n                ],\n                \"ja\": [\n                    {\"translated_text\": \"張偉が番組の司会を続けます。\"},\n                    {\"translated_text\": \"李明司令官がレーダー技術について詳しく紹介しました。\"},\n                    {\"translated_text\": \"このレーダーシステムは非常に先進的です。\"},\n                    {\"translated_text\": \"海軍の装備はますます現代化されています。\"},\n                    {\"translated_text\": \"李将軍の素晴らしい紹介をありがとうございました。\"}\n                ]\n            }\n        },\n        {\n            \"episode_id\": \"episode_3\",\n            \"title\": \"爱上海军蓝 - 第3集（包含不一致翻译）\",\n            \"subtitles\": [\n                {\"text\": \"张伟再次欢迎观众。\"},\n                {\"text\": \"李明将军谈论海军战略。\"},\n                {\"text\": \"雷达技术的发展很重要。\"},\n                {\"text\": \"司令部对此很重视。\"},\n                {\"text\": \"张伟总结了今天的内容。\"}\n            ],\n            \"translations\": {\n                \"en\": [\n                    {\"translated_text\": \"Zhang Wei welcomes the audience again.\"},\n                    {\"translated_text\": \"General Li Ming discusses naval strategy.\"},  # 不一致：之前是Commander\n                    {\"translated_text\": \"The development of radar tech is important.\"},  # 不一致：之前是technology\n                    {\"translated_text\": \"The command center takes this seriously.\"},  # 不一致：司令部翻译不同\n                    {\"translated_text\": \"Zhang Wei summarized today's content.\"}\n                ],\n                \"ja\": [\n                    {\"translated_text\": \"張偉が再び視聴者を歓迎します。\"},\n                    {\"translated_text\": \"李明大将が海軍戦略について話します。\"},  # 不一致：之前是司令官\n                    {\"translated_text\": \"レーダー技術の発展は重要です。\"},\n                    {\"translated_text\": \"司令部はこれを重視しています。\"},\n                    {\"translated_text\": \"張偉が今日の内容をまとめました。\"}\n                ]\n            }\n        }\n    ]\n\n\nasync def demonstrate_basic_consistency_check():\n    \"\"\"演示基础一致性检查\"\"\"\n    print(\"\\\\n\" + \"=\"*60)\n    print(\"演示1: 基础一致性检查功能\")\n    print(\"=\"*60)\n    \n    checker = ConsistencyChecker(\"demo_checker\")\n    episodes = await create_demo_episodes()\n    \n    print(f\"\\\\n检查 {len(episodes)} 个集数的一致性...\")\n    \n    # 创建检查请求\n    request = ConsistencyCheckRequest(\n        request_id=\"demo_basic_001\",\n        project_id=\"love_navy_blue\",\n        episodes=episodes,\n        target_languages=[\"en\", \"ja\"],\n        check_scope=\"project\"\n    )\n    \n    # 执行一致性检查\n    result = await checker.check_consistency(request)\n    \n    print(f\"\\\\n检查结果:\")\n    print(f\"  成功: {result.success}\")\n    print(f\"  一致性评分: {result.consistency_score:.2%}\")\n    print(f\"  检查术语总数: {result.total_terms_checked}\")\n    print(f\"  发现违规: {len(result.violations_found)}\")\n    print(f\"  自动解决: {result.auto_resolved_count}\")\n    print(f\"  需要人工审核: {result.manual_review_required}\")\n    print(f\"  处理时间: {result.processing_time_ms}ms\")\n    \n    # 按类型显示违规统计\n    if result.violations_by_type:\n        print(\"\\\\n违规类型统计:\")\n        for violation_type, count in result.violations_by_type.items():\n            print(f\"  {violation_type.value}: {count} 个\")\n    \n    # 显示具体违规\n    if result.violations_found:\n        print(\"\\\\n发现的一致性违规:\")\n        for i, violation in enumerate(result.violations_found[:5], 1):  # 只显示前5个\n            print(f\"\\\\n违规 {i}:\")\n            print(f\"  术语: {violation.source_term}\")\n            print(f\"  类型: {violation.consistency_type.value}\")\n            print(f\"  严重程度: {violation.severity.value}\")\n            print(f\"  冲突翻译:\")\n            for translation, occurrences in violation.conflicting_translations.items():\n                print(f\"    '{translation}': {len(occurrences)} 次出现\")\n            if violation.suggested_resolution:\n                print(f\"  建议解决方案: {violation.suggested_resolution}\")\n    \n    # 显示建议\n    if result.recommendations:\n        print(\"\\\\n改进建议:\")\n        for i, recommendation in enumerate(result.recommendations, 1):\n            print(f\"  {i}. {recommendation}\")\n\n\nasync def demonstrate_term_extraction():\n    \"\"\"演示术语提取功能\"\"\"\n    print(\"\\\\n\" + \"=\"*60)\n    print(\"演示2: 术语提取和分析\")\n    print(\"=\"*60)\n    \n    checker = ConsistencyChecker(\"demo_extractor\")\n    episodes = await create_demo_episodes()\n    \n    # 提取术语出现情况\n    rules = checker.built_in_rules\n    term_occurrences = checker._extract_term_occurrences(episodes, rules)\n    \n    print(f\"\\\\n提取到 {len(term_occurrences)} 个不同术语\")\n    \n    # 显示每个术语的详细信息\n    for term, languages in term_occurrences.items():\n        print(f\"\\\\n术语: '{term}'\")\n        \n        for language, occurrences in languages.items():\n            print(f\"  {language.upper()} 翻译 ({len(occurrences)} 次出现):\")\n            \n            # 统计不同的翻译版本\n            translation_counts = {}\n            for occurrence in occurrences:\n                translated_term = occurrence['translated_term']\n                if translated_term in translation_counts:\n                    translation_counts[translated_term] += 1\n                else:\n                    translation_counts[translated_term] = 1\n            \n            for translation, count in translation_counts.items():\n                print(f\"    '{translation}': {count} 次\")\n                \n                # 显示上下文（只显示第一个）\n                for occurrence in occurrences:\n                    if occurrence['translated_term'] == translation:\n                        print(f\"      上下文: {occurrence['context'][:80]}...\")\n                        print(f\"      置信度: {occurrence['confidence']:.2f}\")\n                        break\n\n\nasync def demonstrate_custom_rules():\n    \"\"\"演示自定义规则功能\"\"\"\n    print(\"\\\\n\" + \"=\"*60)\n    print(\"演示3: 自定义一致性规则\")\n    print(\"=\"*60)\n    \n    checker = ConsistencyChecker(\"demo_custom\")\n    \n    # 添加自定义规则\n    custom_rule = ConsistencyRule(\n        rule_id=\"naval_equipment\",\n        rule_name=\"海军装备术语\",\n        consistency_type=ConsistencyType.TECHNICAL_TERM,\n        pattern=r\"(战舰|潜艇|驱逐舰|护卫舰|航母|舰载机|鱼雷|导弹|声纳|通信设备)\",\n        case_sensitive=False,\n        severity=ConflictSeverity.HIGH,\n        resolution_strategy=ResolutionStrategy.USE_MOST_FREQUENT,\n        description=\"检查海军装备术语翻译的一致性\",\n        examples=[\"战舰\", \"潜艇\", \"导弹\"]\n    )\n    \n    checker.add_custom_rule(custom_rule)\n    \n    print(f\"添加自定义规则: {custom_rule.rule_name}\")\n    print(f\"规则模式: {custom_rule.pattern}\")\n    print(f\"严重程度: {custom_rule.severity.value}\")\n    \n    # 创建包含海军装备术语的测试数据\n    naval_episodes = [\n        {\n            \"episode_id\": \"naval_test\",\n            \"subtitles\": [\n                {\"text\": \"我们的战舰装备了最新的雷达。\"},\n                {\"text\": \"潜艇部队正在进行演习。\"},\n                {\"text\": \"这艘驱逐舰性能优异。\"}\n            ],\n            \"translations\": {\n                \"en\": [\n                    {\"translated_text\": \"Our warship is equipped with the latest radar.\"},\n                    {\"translated_text\": \"The submarine force is conducting exercises.\"},\n                    {\"translated_text\": \"This destroyer has excellent performance.\"}\n                ],\n                \"ja\": [\n                    {\"translated_text\": \"我々の軍艦は最新のレーダーを装備しています。\"},\n                    {\"translated_text\": \"潜水艦部隊が演習を行っています。\"},\n                    {\"translated_text\": \"この駆逐艦は優秀な性能を持っています。\"}\n                ]\n            }\n        }\n    ]\n    \n    # 使用自定义规则进行检查\n    request = ConsistencyCheckRequest(\n        request_id=\"custom_rule_test\",\n        project_id=\"naval_terms\",\n        episodes=naval_episodes,\n        target_languages=[\"en\", \"ja\"],\n        rules=[custom_rule]\n    )\n    \n    result = await checker.check_consistency(request)\n    \n    print(f\"\\\\n自定义规则检查结果:\")\n    print(f\"  检查术语总数: {result.total_terms_checked}\")\n    print(f\"  一致性评分: {result.consistency_score:.2%}\")\n    \n    # 显示规则统计\n    stats = checker.get_consistency_statistics()\n    print(f\"\\\\n检查器统计:\")\n    print(f\"  总检查次数: {stats['total_checks']}\")\n    print(f\"  自定义规则数: {len(checker.custom_rules)}\")\n\n\nasync def demonstrate_violation_resolution():\n    \"\"\"演示违规解决策略\"\"\"\n    print(\"\\\\n\" + \"=\"*60)\n    print(\"演示4: 违规解决策略\")\n    print(\"=\"*60)\n    \n    checker = ConsistencyChecker(\"demo_resolution\")\n    \n    # 创建包含明显不一致的数据\n    inconsistent_episodes = [\n        {\n            \"episode_id\": \"inconsistent_1\",\n            \"subtitles\": [\n                {\"text\": \"李明司令发表了讲话。\"},\n                {\"text\": \"李明将军强调了重要性。\"},\n                {\"text\": \"李明指挥官总结了要点。\"}\n            ],\n            \"translations\": {\n                \"en\": [\n                    {\"translated_text\": \"Commander Li Ming gave a speech.\"},\n                    {\"translated_text\": \"General Li Ming emphasized the importance.\"},\n                    {\"translated_text\": \"Colonel Li Ming summarized the key points.\"}\n                ]\n            }\n        }\n    ]\n    \n    request = ConsistencyCheckRequest(\n        request_id=\"resolution_demo\",\n        project_id=\"resolution_test\",\n        episodes=inconsistent_episodes,\n        target_languages=[\"en\"],\n        auto_resolve=True\n    )\n    \n    result = await checker.check_consistency(request)\n    \n    print(f\"\\\\n违规解决演示结果:\")\n    print(f\"  发现违规: {len(result.violations_found)}\")\n    print(f\"  自动解决: {result.auto_resolved_count}\")\n    print(f\"  需要人工审核: {result.manual_review_required}\")\n    \n    if result.violations_found:\n        print(\"\\\\n违规详情和解决策略:\")\n        for violation in result.violations_found:\n            print(f\"\\\\n术语: {violation.source_term}\")\n            print(f\"  解决策略: {violation.resolution_strategy.value if violation.resolution_strategy else 'None'}\")\n            print(f\"  建议解决方案: {violation.suggested_resolution or '无'}\")\n            print(f\"  冲突翻译:\")\n            for translation, occurrences in violation.conflicting_translations.items():\n                print(f\"    '{translation}': {len(occurrences)} 次\")\n\n\nasync def demonstrate_cross_episode_analysis():\n    \"\"\"演示跨集分析\"\"\"\n    print(\"\\\\n\" + \"=\"*60)\n    print(\"演示5: 跨集一致性分析\")\n    print(\"=\"*60)\n    \n    checker = ConsistencyChecker(\"demo_cross_episode\")\n    episodes = await create_demo_episodes()\n    \n    # 生成跨集报告\n    report = checker.generate_cross_episode_report(episodes, [\"en\", \"ja\"])\n    \n    print(f\"\\\\n跨集分析报告:\")\n    print(f\"  分析集数: {report['total_episodes']}\")\n    print(f\"  分析语言: {', '.join(report['languages'])}\")\n    print(f\"  总术语数: {report['total_terms']}\")\n    print(f\"  一致术语: {report['consistent_terms']}\")\n    print(f\"  不一致术语: {report['inconsistent_terms']}\")\n    print(f\"  整体一致性: {report['overall_consistency']:.2%}\")\n    \n    # 显示每集的一致性\n    if 'episode_consistency' in report:\n        print(\"\\\\n各集一致性:\")\n        for episode_id, consistency in report['episode_consistency'].items():\n            print(f\"  {episode_id}: {consistency:.2%}\")\n    \n    # 显示语言一致性\n    if 'language_consistency' in report:\n        print(\"\\\\n各语言一致性:\")\n        for language, consistency in report['language_consistency'].items():\n            print(f\"  {language}: {consistency:.2%}\")\n    \n    # 显示最常见的不一致术语\n    if 'top_inconsistent_terms' in report:\n        print(\"\\\\n最常见的不一致术语:\")\n        for term, info in report['top_inconsistent_terms'].items():\n            print(f\"  {term}: {info['inconsistency_count']} 个不一致\")\n\n\nasync def demonstrate_performance_analysis():\n    \"\"\"演示性能分析\"\"\"\n    print(\"\\\\n\" + \"=\"*60)\n    print(\"演示6: 性能分析和统计\")\n    print(\"=\"*60)\n    \n    checker = ConsistencyChecker(\"demo_performance\")\n    \n    # 创建大量测试数据\n    print(\"\\\\n创建性能测试数据...\")\n    large_episodes = []\n    for i in range(10):\n        episode = {\n            \"episode_id\": f\"perf_episode_{i+1}\",\n            \"subtitles\": [],\n            \"translations\": {\"en\": [], \"ja\": []}\n        }\n        \n        # 每集50个字幕\n        for j in range(50):\n            subtitle_text = f\"这是第{i+1}集第{j+1}个字幕，包含张伟、李明司令、雷达系统等术语。\"\n            episode[\"subtitles\"].append({\"text\": subtitle_text})\n            episode[\"translations\"][\"en\"].append({\n                \"translated_text\": f\"This is subtitle {j+1} of episode {i+1}, containing Zhang Wei, Commander Li Ming, radar system and other terms.\"\n            })\n            episode[\"translations\"][\"ja\"].append({\n                \"translated_text\": f\"これは第{i+1}話の第{j+1}字幕で、張偉、李明司令官、レーダーシステムなどの用語が含まれています。\"\n            })\n        \n        large_episodes.append(episode)\n    \n    print(f\"创建了 {len(large_episodes)} 个集数，共 {len(large_episodes) * 50} 个字幕\")\n    \n    # 执行性能测试\n    print(\"\\\\n执行性能测试...\")\n    \n    import time\n    start_time = time.time()\n    \n    request = ConsistencyCheckRequest(\n        request_id=\"performance_test\",\n        project_id=\"performance_project\",\n        episodes=large_episodes,\n        target_languages=[\"en\", \"ja\"]\n    )\n    \n    result = await checker.check_consistency(request)\n    \n    end_time = time.time()\n    total_time = end_time - start_time\n    \n    print(f\"\\\\n性能测试结果:\")\n    print(f\"  总处理时间: {total_time:.2f} 秒\")\n    print(f\"  系统报告时间: {result.processing_time_ms}ms\")\n    print(f\"  检查术语总数: {result.total_terms_checked}\")\n    print(f\"  平均每术语: {total_time / result.total_terms_checked * 1000:.2f}ms\")\n    print(f\"  处理速度: {result.total_terms_checked / total_time:.1f} 术语/秒\")\n    print(f\"  发现违规: {len(result.violations_found)}\")\n    print(f\"  一致性评分: {result.consistency_score:.2%}\")\n    \n    # 获取检查器统计\n    stats = checker.get_consistency_statistics()\n    \n    print(\"\\\\n检查器统计信息:\")\n    print(f\"  总检查次数: {stats['total_checks']}\")\n    print(f\"  发现违规总数: {stats['violations_found']}\")\n    print(f\"  平均一致性评分: {sum(stats['consistency_scores']) / len(stats['consistency_scores']):.2%}\")\n    \n    if 'violation_types' in stats:\n        print(\"  违规类型分布:\")\n        for violation_type, count in stats['violation_types'].items():\n            print(f\"    {violation_type}: {count} 次\")\n\n\nasync def demonstrate_export_functionality():\n    \"\"\"演示导出功能\"\"\"\n    print(\"\\\\n\" + \"=\"*60)\n    print(\"演示7: 违规报告导出\")\n    print(\"=\"*60)\n    \n    checker = ConsistencyChecker(\"demo_export\")\n    episodes = await create_demo_episodes()\n    \n    # 执行检查\n    request = ConsistencyCheckRequest(\n        request_id=\"export_demo\",\n        project_id=\"export_project\",\n        episodes=episodes,\n        target_languages=[\"en\", \"ja\"]\n    )\n    \n    result = await checker.check_consistency(request)\n    \n    # 导出违规报告\n    if result.violations_found:\n        print(f\"\\\\n导出 {len(result.violations_found)} 个违规的详细报告...\")\n        \n        # 导出为JSON格式\n        json_report = checker.export_violations_report(result.violations_found, format=\"json\")\n        print(f\"\\\\nJSON报告示例（前200字符）:\")\n        print(json_report[:200] + \"...\")\n        \n        # 导出为CSV格式\n        csv_report = checker.export_violations_report(result.violations_found, format=\"csv\")\n        print(f\"\\\\nCSV报告示例（前3行）:\")\n        csv_lines = csv_report.split('\\\\n')[:3]\n        for line in csv_lines:\n            print(f\"  {line}\")\n        \n        # 导出为文本格式\n        text_report = checker.export_violations_report(result.violations_found, format=\"text\")\n        print(f\"\\\\n文本报告示例（前300字符）:\")\n        print(text_report[:300] + \"...\")\n    else:\n        print(\"\\\\n没有发现违规，无需导出报告。\")\n\n\nasync def main():\n    \"\"\"主演示函数\"\"\"\n    print(\"字幕翻译系统 - 一致性检查器演示\")\n    print(\"=\"*60)\n    print(\"本演示将展示一致性检查器的各种功能\")\n    \n    try:\n        # 运行各个演示\n        await demonstrate_basic_consistency_check()\n        await demonstrate_term_extraction()\n        await demonstrate_custom_rules()\n        await demonstrate_violation_resolution()\n        await demonstrate_cross_episode_analysis()\n        await demonstrate_performance_analysis()\n        await demonstrate_export_functionality()\n        \n        print(\"\\\\n\" + \"=\"*60)\n        print(\"演示完成!\")\n        print(\"=\"*60)\n        print(\"\\\\n一致性检查器主要功能:\")\n        print(\"✅ 人名、术语、称谓的一致性检查\")\n        print(\"✅ 跨集数的一致性验证机制\")\n        print(\"✅ 一致性冲突的自动修复建议\")\n        print(\"✅ 规则引擎和自定义规则支持\")\n        print(\"✅ 多种违规解决策略\")\n        print(\"✅ 跨集分析和统计报告\")\n        print(\"✅ 高性能批量检查\")\n        print(\"✅ 多格式违规报告导出\")\n        \n    except KeyboardInterrupt:\n        print(\"\\\\n用户中断演示\")\n    except Exception as e:\n        print(f\"\\\\n演示过程中发生错误: {e}\")\n        import traceback\n        traceback.print_exc()\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())"