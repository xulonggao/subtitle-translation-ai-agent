#!/usr/bin/env python3\n\"\"\"\n字幕显示验证器演示脚本\n\"\"\"\nimport asyncio\nfrom models.subtitle_models import SubtitleEntry\n\n\nclass SubtitleDisplayValidator:\n    \"\"\"字幕显示验证器演示版\"\"\"\n    \n    def __init__(self, validator_id: str = \"demo_validator\"):\n        self.validator_id = validator_id\n        self.language_configs = {\n            \"en\": {\n                \"max_chars_per_line\": 42,\n                \"min_duration_ms\": 1000,\n                \"reading_speed_cps\": 17\n            },\n            \"zh\": {\n                \"max_chars_per_line\": 20,\n                \"min_duration_ms\": 1000,\n                \"reading_speed_cps\": 8\n            }\n        }\n        print(f\"字幕显示验证器初始化完成: {self.validator_id}\")\n    \n    async def validate_subtitles(self, subtitles, target_language=\"en\"):\n        \"\"\"验证字幕\"\"\"\n        print(f\"\\n开始验证 {len(subtitles)} 个字幕...\")\n        \n        lang_config = self.language_configs.get(target_language, self.language_configs[\"en\"])\n        issues = []\n        \n        # 1. 检查时长\n        min_duration_ms = lang_config[\"min_duration_ms\"]\n        for i, subtitle in enumerate(subtitles):\n            duration_ms = subtitle.duration_seconds * 1000\n            if duration_ms < min_duration_ms:\n                issues.append({\n                    \"type\": \"duration\",\n                    \"subtitle_index\": i,\n                    \"message\": f\"字幕{i+1}显示时长过短: {duration_ms:.0f}ms < {min_duration_ms}ms\",\n                    \"severity\": \"high\",\n                    \"can_auto_fix\": True\n                })\n        \n        # 2. 检查字符数\n        max_chars = lang_config[\"max_chars_per_line\"]\n        for i, subtitle in enumerate(subtitles):\n            lines = subtitle.text.split('\\n')\n            for line_idx, line in enumerate(lines):\n                if len(line) > max_chars:\n                    issues.append({\n                        \"type\": \"character_count\",\n                        \"subtitle_index\": i,\n                        \"message\": f\"字幕{i+1}第{line_idx+1}行字符数过多: {len(line)} > {max_chars}\",\n                        \"severity\": \"high\",\n                        \"can_auto_fix\": True\n                    })\n        \n        # 3. 检查重叠\n        for i in range(len(subtitles) - 1):\n            current = subtitles[i]\n            next_subtitle = subtitles[i + 1]\n            if current.end_time > next_subtitle.start_time:\n                overlap_ms = (current.end_time - next_subtitle.start_time) * 1000\n                issues.append({\n                    \"type\": \"overlap\",\n                    \"subtitle_index\": i,\n                    \"message\": f\"字幕{i+1}与字幕{i+2}重叠: {overlap_ms:.0f}ms\",\n                    \"severity\": \"critical\",\n                    \"can_auto_fix\": True\n                })\n        \n        # 4. 检查阅读速度\n        max_cps = lang_config[\"reading_speed_cps\"]\n        for i, subtitle in enumerate(subtitles):\n            text_length = len(subtitle.text.replace('\\n', ''))\n            if subtitle.duration_seconds > 0:\n                current_cps = text_length / subtitle.duration_seconds\n                if current_cps > max_cps:\n                    issues.append({\n                        \"type\": \"reading_speed\",\n                        \"subtitle_index\": i,\n                        \"message\": f\"字幕{i+1}阅读速度过快: {current_cps:.1f} > {max_cps} 字符/秒\",\n                        \"severity\": \"high\",\n                        \"can_auto_fix\": True\n                    })\n        \n        # 计算验证分数\n        if not issues:\n            validation_score = 1.0\n        else:\n            # 根据问题严重程度计算扣分\n            penalty = 0\n            for issue in issues:\n                if issue[\"severity\"] == \"critical\":\n                    penalty += 0.3\n                elif issue[\"severity\"] == \"high\":\n                    penalty += 0.2\n                else:\n                    penalty += 0.1\n            validation_score = max(0.0, 1.0 - penalty / len(subtitles))\n        \n        # 生成建议\n        recommendations = []\n        if not issues:\n            recommendations.append(\"恭喜！所有字幕都符合显示标准\")\n        else:\n            critical_issues = [i for i in issues if i[\"severity\"] == \"critical\"]\n            high_issues = [i for i in issues if i[\"severity\"] == \"high\"]\n            \n            if critical_issues:\n                recommendations.append(f\"发现 {len(critical_issues)} 个严重问题，必须立即修复\")\n            if high_issues:\n                recommendations.append(f\"发现 {len(high_issues)} 个高优先级问题，建议优先处理\")\n            \n            auto_fixable = len([i for i in issues if i[\"can_auto_fix\"]])\n            if auto_fixable > 0:\n                recommendations.append(f\"其中 {auto_fixable} 个问题可以自动修复\")\n        \n        return {\n            \"success\": True,\n            \"issues_found\": issues,\n            \"validation_score\": validation_score,\n            \"recommendations\": recommendations\n        }\n\n\nasync def create_demo_subtitles():\n    \"\"\"创建演示字幕数据\"\"\"\n    return [\n        # 正常字幕\n        SubtitleEntry(\n            index=1,\n            start_time=0.0,\n            end_time=3.0,\n            text=\"Welcome to our program.\",\n            speaker=\"Host\"\n        ),\n        # 时长过短的字幕\n        SubtitleEntry(\n            index=2,\n            start_time=3.0,\n            end_time=3.5,  # 只有0.5秒\n            text=\"This is a short subtitle.\",\n            speaker=\"Host\"\n        ),\n        # 字符数过多的字幕\n        SubtitleEntry(\n            index=3,\n            start_time=4.0,\n            end_time=7.0,\n            text=\"This is an extremely long subtitle that definitely exceeds the recommended character limit for subtitles.\",\n            speaker=\"Guest\"\n        ),\n        # 重叠的字幕\n        SubtitleEntry(\n            index=4,\n            start_time=6.5,  # 与上一个字幕重叠\n            end_time=9.0,\n            text=\"This subtitle overlaps with the previous one.\",\n            speaker=\"Guest\"\n        ),\n        # 阅读速度过快的字幕\n        SubtitleEntry(\n            index=5,\n            start_time=10.0,\n            end_time=11.0,  # 只有1秒\n            text=\"This is a very long subtitle with many characters that cannot be read in just one second.\",\n            speaker=\"Host\"\n        )\n    ]\n\n\nasync def demonstrate_validation():\n    \"\"\"演示验证功能\"\"\"\n    print(\"字幕翻译系统 - 字幕显示验证器演示\")\n    print(\"=\" * 50)\n    \n    # 创建验证器\n    validator = SubtitleDisplayValidator()\n    \n    # 创建测试字幕\n    subtitles = await create_demo_subtitles()\n    \n    print(f\"\\n创建了 {len(subtitles)} 个测试字幕:\")\n    for i, subtitle in enumerate(subtitles, 1):\n        print(f\"  {i}. [{subtitle.start_time:.1f}s-{subtitle.end_time:.1f}s] {subtitle.text[:50]}{'...' if len(subtitle.text) > 50 else ''}\")\n    \n    # 执行验证\n    result = await validator.validate_subtitles(subtitles, \"en\")\n    \n    # 显示结果\n    print(f\"\\n验证结果:\")\n    print(f\"  成功: {result['success']}\")\n    print(f\"  验证分数: {result['validation_score']:.2%}\")\n    print(f\"  发现问题: {len(result['issues_found'])} 个\")\n    \n    if result['issues_found']:\n        print(f\"\\n问题详情:\")\n        for i, issue in enumerate(result['issues_found'], 1):\n            print(f\"  {i}. [{issue['severity'].upper()}] {issue['message']}\")\n            print(f\"     类型: {issue['type']}, 可自动修复: {issue['can_auto_fix']}\")\n    \n    if result['recommendations']:\n        print(f\"\\n改进建议:\")\n        for i, recommendation in enumerate(result['recommendations'], 1):\n            print(f\"  {i}. {recommendation}\")\n    \n    # 测试中文字幕\n    print(f\"\\n\" + \"=\" * 50)\n    print(\"测试中文字幕验证\")\n    \n    chinese_subtitles = [\n        SubtitleEntry(\n            index=1,\n            start_time=0.0,\n            end_time=0.8,  # 时长过短\n            text=\"这是一个很长的中文字幕，用来测试中文语言的字符数限制和阅读速度验证功能，应该会被标记为问题。\",\n            speaker=\"主持人\"\n        ),\n        SubtitleEntry(\n            index=2,\n            start_time=1.0,\n            end_time=3.0,\n            text=\"正常的中文字幕。\",\n            speaker=\"嘉宾\"\n        )\n    ]\n    \n    zh_result = await validator.validate_subtitles(chinese_subtitles, \"zh\")\n    \n    print(f\"\\n中文验证结果:\")\n    print(f\"  验证分数: {zh_result['validation_score']:.2%}\")\n    print(f\"  发现问题: {len(zh_result['issues_found'])} 个\")\n    \n    if zh_result['issues_found']:\n        for i, issue in enumerate(zh_result['issues_found'], 1):\n            print(f\"  {i}. {issue['message']}\")\n    \n    print(f\"\\n演示完成！\")\n    print(f\"\\n字幕显示验证器主要功能:\")\n    print(f\"✅ 字幕时长验证 (最小显示时间检查)\")\n    print(f\"✅ 字符数验证 (每行字符数限制)\")\n    print(f\"✅ 重叠检测 (字幕时间冲突检测)\")\n    print(f\"✅ 阅读速度验证 (基于语言的阅读速度检查)\")\n    print(f\"✅ 多语言支持 (英语、中文等不同配置)\")\n    print(f\"✅ 自动修复建议 (可自动修复的问题标识)\")\n    print(f\"✅ 验证分数计算 (基于问题严重程度)\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(demonstrate_validation())"