#!/usr/bin/env python3
"""
监控仪表板
负责监控数据的可视化和报告功能
"""
import uuid
import json
import os
from typing import Dict, List, Optional, Any, Tuple
from datetime import datetime, timedelta
from dataclasses import dataclass, asdict
from collections import defaultdict
import math

from config import get_logger

logger = get_logger("monitoring_dashboard")


@dataclass
class DashboardWidget:
    """仪表板组件"""
    widget_id: str
    widget_type: str  # chart, metric, table, alert, progress
    title: str
    data_source: str
    config: Dict[str, Any]
    position: Tuple[int, int]  # (row, col)
    size: Tuple[int, int]      # (width, height)
    refresh_interval: int = 30  # 刷新间隔（秒）
    visible: bool = True


@dataclass
class DashboardLayout:
    """仪表板布局"""
    layout_id: str
    name: str
    description: str
    widgets: List[DashboardWidget]
    created_at: datetime
    updated_at: datetime


class MonitoringDashboard:
    """监控仪表板
    
    负责：
    1. 监控数据的可视化
    2. 实时仪表板生成
    3. 报告生成和导出
    4. 告警可视化
    """
    
    def __init__(self, dashboard_id: str = None):
        self.dashboard_id = dashboard_id or f\"dashboard_{uuid.uuid4().hex[:8]}\"\n        \n        # 仪表板数据\n        self.layouts: Dict[str, DashboardLayout] = {}\n        self.data_sources: Dict[str, Any] = {}  # 数据源注册\n        \n        # 预定义布局\n        self._create_default_layouts()\n        \n        # 报告模板\n        self.report_templates = {\n            \"system_overview\": self._create_system_overview_template(),\n            \"workflow_performance\": self._create_workflow_performance_template(),\n            \"agent_health\": self._create_agent_health_template(),\n            \"error_analysis\": self._create_error_analysis_template()\n        }\n        \n        logger.info(\"监控仪表板初始化完成\", dashboard_id=self.dashboard_id)\n    \n    def register_data_source(self, source_name: str, data_provider: Any):\n        \"\"\"注册数据源\"\"\"\n        self.data_sources[source_name] = data_provider\n        logger.info(\"数据源已注册\", source_name=source_name)\n    \n    def create_layout(self, name: str, description: str, \n                     widgets: List[DashboardWidget]) -> str:\n        \"\"\"创建仪表板布局\"\"\"\n        layout_id = f\"layout_{uuid.uuid4().hex[:8]}\"\n        \n        layout = DashboardLayout(\n            layout_id=layout_id,\n            name=name,\n            description=description,\n            widgets=widgets,\n            created_at=datetime.now(),\n            updated_at=datetime.now()\n        )\n        \n        self.layouts[layout_id] = layout\n        \n        logger.info(\"仪表板布局已创建\", \n                   layout_id=layout_id, \n                   name=name,\n                   widgets_count=len(widgets))\n        \n        return layout_id\n    \n    def _create_default_layouts(self):\n        \"\"\"创建默认布局\"\"\"\n        # 系统概览布局\n        system_widgets = [\n            DashboardWidget(\n                widget_id=\"system_status\",\n                widget_type=\"metric\",\n                title=\"系统状态\",\n                data_source=\"system_metrics\",\n                config={\"metric\": \"system_health\", \"format\": \"status\"},\n                position=(0, 0),\n                size=(2, 1)\n            ),\n            DashboardWidget(\n                widget_id=\"active_workflows\",\n                widget_type=\"metric\",\n                title=\"活跃工作流\",\n                data_source=\"workflow_metrics\",\n                config={\"metric\": \"active_count\", \"format\": \"number\"},\n                position=(0, 2),\n                size=(2, 1)\n            ),\n            DashboardWidget(\n                widget_id=\"cpu_usage_chart\",\n                widget_type=\"chart\",\n                title=\"CPU使用率\",\n                data_source=\"performance_metrics\",\n                config={\n                    \"chart_type\": \"line\",\n                    \"metric\": \"cpu_usage\",\n                    \"time_range\": \"1h\",\n                    \"y_axis\": {\"min\": 0, \"max\": 100, \"unit\": \"%\"}\n                },\n                position=(1, 0),\n                size=(4, 2)\n            ),\n            DashboardWidget(\n                widget_id=\"memory_usage_chart\",\n                widget_type=\"chart\",\n                title=\"内存使用率\",\n                data_source=\"performance_metrics\",\n                config={\n                    \"chart_type\": \"line\",\n                    \"metric\": \"memory_usage\",\n                    \"time_range\": \"1h\",\n                    \"y_axis\": {\"min\": 0, \"max\": 100, \"unit\": \"%\"}\n                },\n                position=(1, 4),\n                size=(4, 2)\n            ),\n            DashboardWidget(\n                widget_id=\"task_throughput\",\n                widget_type=\"chart\",\n                title=\"任务处理吞吐量\",\n                data_source=\"performance_metrics\",\n                config={\n                    \"chart_type\": \"bar\",\n                    \"metric\": \"tasks_per_second\",\n                    \"time_range\": \"1h\",\n                    \"aggregation\": \"avg\"\n                },\n                position=(3, 0),\n                size=(4, 2)\n            ),\n            DashboardWidget(\n                widget_id=\"error_rate\",\n                widget_type=\"chart\",\n                title=\"错误率\",\n                data_source=\"performance_metrics\",\n                config={\n                    \"chart_type\": \"area\",\n                    \"metric\": \"error_rate\",\n                    \"time_range\": \"1h\",\n                    \"y_axis\": {\"min\": 0, \"unit\": \"%\"},\n                    \"alert_threshold\": 10\n                },\n                position=(3, 4),\n                size=(4, 2)\n            ),\n            DashboardWidget(\n                widget_id=\"recent_alerts\",\n                widget_type=\"alert\",\n                title=\"最近告警\",\n                data_source=\"alert_system\",\n                config={\"limit\": 10, \"severity_filter\": [\"warning\", \"error\"]},\n                position=(5, 0),\n                size=(8, 2)\n            )\n        ]\n        \n        self.create_layout(\n            \"系统概览\",\n            \"系统整体运行状态和性能指标\",\n            system_widgets\n        )\n        \n        # 工作流监控布局\n        workflow_widgets = [\n            DashboardWidget(\n                widget_id=\"workflow_progress\",\n                widget_type=\"progress\",\n                title=\"工作流进度\",\n                data_source=\"workflow_tracker\",\n                config={\"show_details\": True, \"group_by\": \"status\"},\n                position=(0, 0),\n                size=(8, 3)\n            ),\n            DashboardWidget(\n                widget_id=\"workflow_timeline\",\n                widget_type=\"chart\",\n                title=\"工作流时间线\",\n                data_source=\"workflow_tracker\",\n                config={\n                    \"chart_type\": \"timeline\",\n                    \"time_range\": \"24h\",\n                    \"group_by\": \"project_id\"\n                },\n                position=(3, 0),\n                size=(8, 4)\n            ),\n            DashboardWidget(\n                widget_id=\"task_distribution\",\n                widget_type=\"chart\",\n                title=\"任务分布\",\n                data_source=\"workflow_tracker\",\n                config={\n                    \"chart_type\": \"pie\",\n                    \"metric\": \"task_status\",\n                    \"show_legend\": True\n                },\n                position=(0, 8),\n                size=(4, 3)\n            ),\n            DashboardWidget(\n                widget_id=\"agent_utilization\",\n                widget_type=\"chart\",\n                title=\"Agent利用率\",\n                data_source=\"agent_metrics\",\n                config={\n                    \"chart_type\": \"heatmap\",\n                    \"metric\": \"utilization\",\n                    \"time_range\": \"6h\"\n                },\n                position=(3, 8),\n                size=(4, 3)\n            )\n        ]\n        \n        self.create_layout(\n            \"工作流监控\",\n            \"工作流执行状态和任务分布\",\n            workflow_widgets\n        )\n    \n    def get_layout(self, layout_id: str) -> Optional[DashboardLayout]:\n        \"\"\"获取布局\"\"\"\n        return self.layouts.get(layout_id)\n    \n    def list_layouts(self) -> List[DashboardLayout]:\n        \"\"\"列出所有布局\"\"\"\n        return list(self.layouts.values())\n    \n    def render_dashboard(self, layout_id: str, format: str = \"html\") -> str:\n        \"\"\"渲染仪表板\"\"\"\n        layout = self.get_layout(layout_id)\n        if not layout:\n            raise ValueError(f\"布局不存在: {layout_id}\")\n        \n        if format == \"html\":\n            return self._render_html_dashboard(layout)\n        elif format == \"json\":\n            return self._render_json_dashboard(layout)\n        else:\n            raise ValueError(f\"不支持的格式: {format}\")\n    \n    def _render_html_dashboard(self, layout: DashboardLayout) -> str:\n        \"\"\"渲染HTML仪表板\"\"\"\n        html_template = \"\"\"\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{title}</title>\n    <style>\n        body {{\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            margin: 0;\n            padding: 20px;\n            background-color: #f5f5f5;\n        }}\n        .dashboard {{\n            display: grid;\n            grid-template-columns: repeat(12, 1fr);\n            grid-gap: 20px;\n            max-width: 1400px;\n            margin: 0 auto;\n        }}\n        .widget {{\n            background: white;\n            border-radius: 8px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n            padding: 20px;\n            position: relative;\n        }}\n        .widget-title {{\n            font-size: 18px;\n            font-weight: 600;\n            margin-bottom: 15px;\n            color: #333;\n        }}\n        .metric-value {{\n            font-size: 36px;\n            font-weight: 700;\n            color: #2196F3;\n            text-align: center;\n        }}\n        .metric-label {{\n            font-size: 14px;\n            color: #666;\n            text-align: center;\n            margin-top: 5px;\n        }}\n        .chart-placeholder {{\n            height: 200px;\n            background: #f8f9fa;\n            border: 2px dashed #dee2e6;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            color: #6c757d;\n            border-radius: 4px;\n        }}\n        .progress-bar {{\n            width: 100%;\n            height: 20px;\n            background-color: #e9ecef;\n            border-radius: 10px;\n            overflow: hidden;\n            margin: 10px 0;\n        }}\n        .progress-fill {{\n            height: 100%;\n            background: linear-gradient(90deg, #28a745, #20c997);\n            transition: width 0.3s ease;\n        }}\n        .alert-item {{\n            padding: 10px;\n            margin: 5px 0;\n            border-left: 4px solid #dc3545;\n            background: #f8d7da;\n            border-radius: 4px;\n        }}\n        .alert-warning {{\n            border-left-color: #ffc107;\n            background: #fff3cd;\n        }}\n        .timestamp {{\n            position: absolute;\n            top: 10px;\n            right: 15px;\n            font-size: 12px;\n            color: #999;\n        }}\n        .refresh-btn {{\n            position: fixed;\n            bottom: 20px;\n            right: 20px;\n            background: #007bff;\n            color: white;\n            border: none;\n            border-radius: 50px;\n            padding: 15px 20px;\n            cursor: pointer;\n            box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n        }}\n    </style>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div class=\"timestamp\">更新时间: {timestamp}</div>\n    <h1 style=\"text-align: center; color: #333; margin-bottom: 30px;\">{title}</h1>\n    <div class=\"dashboard\">\n        {widgets_html}\n    </div>\n    <button class=\"refresh-btn\" onclick=\"location.reload()\">刷新</button>\n    \n    <script>\n        // 自动刷新\n        setTimeout(() => {{\n            location.reload();\n        }}, 30000); // 30秒刷新\n        \n        // 图表初始化\n        {charts_js}\n    </script>\n</body>\n</html>\n        \"\"\"\n        \n        widgets_html = \"\"\n        charts_js = \"\"\n        \n        for widget in layout.widgets:\n            widget_html, widget_js = self._render_widget(widget)\n            widgets_html += widget_html\n            if widget_js:\n                charts_js += widget_js + \"\\n\"\n        \n        return html_template.format(\n            title=layout.name,\n            timestamp=datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\"),\n            widgets_html=widgets_html,\n            charts_js=charts_js\n        )\n    \n    def _render_widget(self, widget: DashboardWidget) -> Tuple[str, str]:\n        \"\"\"渲染单个组件\"\"\"\n        if not widget.visible:\n            return \"\", \"\"\n        \n        # 计算网格位置\n        grid_style = f\"grid-column: span {widget.size[0]}; grid-row: span {widget.size[1]};\"\n        \n        widget_html = f'<div class=\"widget\" style=\"{grid_style}\">'\n        widget_html += f'<div class=\"widget-title\">{widget.title}</div>'\n        \n        widget_js = \"\"\n        \n        if widget.widget_type == \"metric\":\n            # 获取指标数据\n            value, label = self._get_metric_data(widget)\n            widget_html += f'<div class=\"metric-value\">{value}</div>'\n            widget_html += f'<div class=\"metric-label\">{label}</div>'\n            \n        elif widget.widget_type == \"chart\":\n            chart_id = f\"chart_{widget.widget_id}\"\n            widget_html += f'<canvas id=\"{chart_id}\" width=\"400\" height=\"200\"></canvas>'\n            \n            # 生成图表JavaScript\n            chart_data = self._get_chart_data(widget)\n            widget_js = self._generate_chart_js(chart_id, widget, chart_data)\n            \n        elif widget.widget_type == \"progress\":\n            progress_data = self._get_progress_data(widget)\n            for item in progress_data:\n                widget_html += f'<div><strong>{item[\"name\"]}</strong></div>'\n                widget_html += f'<div class=\"progress-bar\">'\n                widget_html += f'<div class=\"progress-fill\" style=\"width: {item[\"progress\"]}%\"></div>'\n                widget_html += f'</div>'\n                widget_html += f'<div style=\"text-align: right; font-size: 12px; color: #666;\">{item[\"progress\"]:.1f}%</div>'\n            \n        elif widget.widget_type == \"alert\":\n            alerts = self._get_alert_data(widget)\n            for alert in alerts:\n                alert_class = \"alert-warning\" if alert[\"severity\"] == \"warning\" else \"\"\n                widget_html += f'<div class=\"alert-item {alert_class}\">'\n                widget_html += f'<strong>{alert[\"title\"]}</strong><br>'\n                widget_html += f'{alert[\"message\"]}<br>'\n                widget_html += f'<small>{alert[\"timestamp\"]}</small>'\n                widget_html += f'</div>'\n            \n        elif widget.widget_type == \"table\":\n            table_data = self._get_table_data(widget)\n            widget_html += '<table style=\"width: 100%; border-collapse: collapse;\">'\n            \n            # 表头\n            if table_data and \"headers\" in table_data:\n                widget_html += '<tr>'\n                for header in table_data[\"headers\"]:\n                    widget_html += f'<th style=\"border: 1px solid #ddd; padding: 8px; background: #f8f9fa;\">{header}</th>'\n                widget_html += '</tr>'\n            \n            # 数据行\n            if table_data and \"rows\" in table_data:\n                for row in table_data[\"rows\"]:\n                    widget_html += '<tr>'\n                    for cell in row:\n                        widget_html += f'<td style=\"border: 1px solid #ddd; padding: 8px;\">{cell}</td>'\n                    widget_html += '</tr>'\n            \n            widget_html += '</table>'\n        \n        widget_html += '</div>'\n        \n        return widget_html, widget_js\n    \n    def _get_metric_data(self, widget: DashboardWidget) -> Tuple[str, str]:\n        \"\"\"获取指标数据\"\"\"\n        data_source = self.data_sources.get(widget.data_source)\n        if not data_source:\n            return \"N/A\", \"数据源不可用\"\n        \n        try:\n            if hasattr(data_source, 'get_metric'):\n                metric_name = widget.config.get('metric', 'unknown')\n                value = data_source.get_metric(metric_name)\n                \n                # 格式化值\n                format_type = widget.config.get('format', 'number')\n                if format_type == 'number':\n                    return str(value), \"\"\n                elif format_type == 'percentage':\n                    return f\"{value:.1f}%\", \"\"\n                elif format_type == 'status':\n                    return \"正常\" if value else \"异常\", \"\"\n                else:\n                    return str(value), \"\"\n            else:\n                return \"0\", \"数据源无效\"\n                \n        except Exception as e:\n            logger.error(\"获取指标数据失败\", widget_id=widget.widget_id, error=str(e))\n            return \"错误\", str(e)\n    \n    def _get_chart_data(self, widget: DashboardWidget) -> Dict[str, Any]:\n        \"\"\"获取图表数据\"\"\"\n        data_source = self.data_sources.get(widget.data_source)\n        if not data_source:\n            return {\"labels\": [], \"datasets\": []}\n        \n        try:\n            if hasattr(data_source, 'get_chart_data'):\n                return data_source.get_chart_data(widget.config)\n            else:\n                # 生成示例数据\n                return self._generate_sample_chart_data(widget)\n                \n        except Exception as e:\n            logger.error(\"获取图表数据失败\", widget_id=widget.widget_id, error=str(e))\n            return {\"labels\": [], \"datasets\": []}\n    \n    def _generate_sample_chart_data(self, widget: DashboardWidget) -> Dict[str, Any]:\n        \"\"\"生成示例图表数据\"\"\"\n        import random\n        \n        chart_type = widget.config.get('chart_type', 'line')\n        \n        if chart_type == 'line':\n            labels = [f\"{i}:00\" for i in range(24)]\n            data = [random.randint(20, 80) for _ in range(24)]\n            return {\n                \"labels\": labels,\n                \"datasets\": [{\n                    \"label\": widget.title,\n                    \"data\": data,\n                    \"borderColor\": \"rgb(75, 192, 192)\",\n                    \"backgroundColor\": \"rgba(75, 192, 192, 0.2)\",\n                    \"tension\": 0.1\n                }]\n            }\n        elif chart_type == 'bar':\n            labels = [\"文件解析\", \"上下文分析\", \"翻译\", \"质量控制\", \"优化\"]\n            data = [random.randint(10, 100) for _ in range(5)]\n            return {\n                \"labels\": labels,\n                \"datasets\": [{\n                    \"label\": \"任务数量\",\n                    \"data\": data,\n                    \"backgroundColor\": [\n                        \"rgba(255, 99, 132, 0.8)\",\n                        \"rgba(54, 162, 235, 0.8)\",\n                        \"rgba(255, 205, 86, 0.8)\",\n                        \"rgba(75, 192, 192, 0.8)\",\n                        \"rgba(153, 102, 255, 0.8)\"\n                    ]\n                }]\n            }\n        elif chart_type == 'pie':\n            return {\n                \"labels\": [\"完成\", \"进行中\", \"失败\", \"等待\"],\n                \"datasets\": [{\n                    \"data\": [65, 20, 10, 5],\n                    \"backgroundColor\": [\n                        \"#28a745\",\n                        \"#17a2b8\",\n                        \"#dc3545\",\n                        \"#ffc107\"\n                    ]\n                }]\n            }\n        else:\n            return {\"labels\": [], \"datasets\": []}\n    \n    def _generate_chart_js(self, chart_id: str, widget: DashboardWidget, \n                          chart_data: Dict[str, Any]) -> str:\n        \"\"\"生成图表JavaScript代码\"\"\"\n        chart_type = widget.config.get('chart_type', 'line')\n        \n        options = {\n            \"responsive\": True,\n            \"maintainAspectRatio\": False,\n            \"plugins\": {\n                \"legend\": {\n                    \"display\": widget.config.get('show_legend', True)\n                }\n            }\n        }\n        \n        # 添加Y轴配置\n        if 'y_axis' in widget.config:\n            y_axis_config = widget.config['y_axis']\n            options[\"scales\"] = {\n                \"y\": {\n                    \"beginAtZero\": True,\n                    \"min\": y_axis_config.get('min'),\n                    \"max\": y_axis_config.get('max')\n                }\n            }\n        \n        chart_config = {\n            \"type\": chart_type,\n            \"data\": chart_data,\n            \"options\": options\n        }\n        \n        return f\"\"\"\n        new Chart(document.getElementById('{chart_id}'), {json.dumps(chart_config)});\n        \"\"\"\n    \n    def _get_progress_data(self, widget: DashboardWidget) -> List[Dict[str, Any]]:\n        \"\"\"获取进度数据\"\"\"\n        data_source = self.data_sources.get(widget.data_source)\n        if not data_source:\n            return []\n        \n        try:\n            if hasattr(data_source, 'get_progress_data'):\n                return data_source.get_progress_data(widget.config)\n            else:\n                # 生成示例数据\n                return [\n                    {\"name\": \"工作流 1\", \"progress\": 75.5},\n                    {\"name\": \"工作流 2\", \"progress\": 45.2},\n                    {\"name\": \"工作流 3\", \"progress\": 90.8}\n                ]\n                \n        except Exception as e:\n            logger.error(\"获取进度数据失败\", widget_id=widget.widget_id, error=str(e))\n            return []\n    \n    def _get_alert_data(self, widget: DashboardWidget) -> List[Dict[str, Any]]:\n        \"\"\"获取告警数据\"\"\"\n        data_source = self.data_sources.get(widget.data_source)\n        if not data_source:\n            return []\n        \n        try:\n            if hasattr(data_source, 'get_recent_alerts'):\n                return data_source.get_recent_alerts(widget.config.get('limit', 10))\n            else:\n                # 生成示例数据\n                return [\n                    {\n                        \"title\": \"CPU使用率过高\",\n                        \"message\": \"系统CPU使用率达到85%，请检查系统负载\",\n                        \"severity\": \"warning\",\n                        \"timestamp\": \"2025-08-10 20:15:30\"\n                    },\n                    {\n                        \"title\": \"任务执行失败\",\n                        \"message\": \"翻译任务 task_001 执行失败\",\n                        \"severity\": \"error\",\n                        \"timestamp\": \"2025-08-10 20:10:15\"\n                    }\n                ]\n                \n        except Exception as e:\n            logger.error(\"获取告警数据失败\", widget_id=widget.widget_id, error=str(e))\n            return []\n    \n    def _get_table_data(self, widget: DashboardWidget) -> Dict[str, Any]:\n        \"\"\"获取表格数据\"\"\"\n        data_source = self.data_sources.get(widget.data_source)\n        if not data_source:\n            return {}\n        \n        try:\n            if hasattr(data_source, 'get_table_data'):\n                return data_source.get_table_data(widget.config)\n            else:\n                # 生成示例数据\n                return {\n                    \"headers\": [\"Agent\", \"状态\", \"任务数\", \"成功率\"],\n                    \"rows\": [\n                        [\"文件解析Agent\", \"运行中\", \"15\", \"95%\"],\n                        [\"翻译Agent\", \"运行中\", \"23\", \"92%\"],\n                        [\"质量检查Agent\", \"空闲\", \"8\", \"98%\"]\n                    ]\n                }\n                \n        except Exception as e:\n            logger.error(\"获取表格数据失败\", widget_id=widget.widget_id, error=str(e))\n            return {}\n    \n    def _render_json_dashboard(self, layout: DashboardLayout) -> str:\n        \"\"\"渲染JSON格式仪表板\"\"\"\n        dashboard_data = {\n            \"layout_id\": layout.layout_id,\n            \"name\": layout.name,\n            \"description\": layout.description,\n            \"timestamp\": datetime.now().isoformat(),\n            \"widgets\": []\n        }\n        \n        for widget in layout.widgets:\n            if not widget.visible:\n                continue\n                \n            widget_data = {\n                \"widget_id\": widget.widget_id,\n                \"type\": widget.widget_type,\n                \"title\": widget.title,\n                \"position\": widget.position,\n                \"size\": widget.size,\n                \"data\": self._get_widget_data(widget)\n            }\n            \n            dashboard_data[\"widgets\"].append(widget_data)\n        \n        return json.dumps(dashboard_data, indent=2, ensure_ascii=False, default=str)\n    \n    def _get_widget_data(self, widget: DashboardWidget) -> Any:\n        \"\"\"获取组件数据\"\"\"\n        if widget.widget_type == \"metric\":\n            value, label = self._get_metric_data(widget)\n            return {\"value\": value, \"label\": label}\n        elif widget.widget_type == \"chart\":\n            return self._get_chart_data(widget)\n        elif widget.widget_type == \"progress\":\n            return self._get_progress_data(widget)\n        elif widget.widget_type == \"alert\":\n            return self._get_alert_data(widget)\n        elif widget.widget_type == \"table\":\n            return self._get_table_data(widget)\n        else:\n            return {}\n    \n    def generate_report(self, template_name: str, \n                       parameters: Dict[str, Any] = None) -> Dict[str, Any]:\n        \"\"\"生成报告\"\"\"\n        if template_name not in self.report_templates:\n            raise ValueError(f\"报告模板不存在: {template_name}\")\n        \n        template = self.report_templates[template_name]\n        parameters = parameters or {}\n        \n        report = {\n            \"report_id\": f\"report_{uuid.uuid4().hex[:8]}\",\n            \"template_name\": template_name,\n            \"generated_at\": datetime.now(),\n            \"parameters\": parameters,\n            \"sections\": []\n        }\n        \n        for section in template[\"sections\"]:\n            section_data = self._generate_report_section(section, parameters)\n            report[\"sections\"].append(section_data)\n        \n        logger.info(\"报告已生成\", \n                   report_id=report[\"report_id\"],\n                   template_name=template_name)\n        \n        return report\n    \n    def _create_system_overview_template(self) -> Dict[str, Any]:\n        \"\"\"创建系统概览报告模板\"\"\"\n        return {\n            \"name\": \"系统概览报告\",\n            \"description\": \"系统整体运行状态和性能概览\",\n            \"sections\": [\n                {\n                    \"title\": \"系统状态摘要\",\n                    \"type\": \"summary\",\n                    \"data_source\": \"system_metrics\",\n                    \"metrics\": [\"system_health\", \"uptime\", \"active_workflows\", \"total_tasks\"]\n                },\n                {\n                    \"title\": \"性能指标\",\n                    \"type\": \"metrics_table\",\n                    \"data_source\": \"performance_metrics\",\n                    \"time_range\": \"24h\",\n                    \"metrics\": [\"cpu_usage\", \"memory_usage\", \"tasks_per_second\", \"error_rate\"]\n                },\n                {\n                    \"title\": \"告警统计\",\n                    \"type\": \"alert_summary\",\n                    \"data_source\": \"alert_system\",\n                    \"time_range\": \"24h\"\n                }\n            ]\n        }\n    \n    def _create_workflow_performance_template(self) -> Dict[str, Any]:\n        \"\"\"创建工作流性能报告模板\"\"\"\n        return {\n            \"name\": \"工作流性能报告\",\n            \"description\": \"工作流执行性能和效率分析\",\n            \"sections\": [\n                {\n                    \"title\": \"工作流统计\",\n                    \"type\": \"workflow_stats\",\n                    \"data_source\": \"workflow_tracker\",\n                    \"time_range\": \"7d\"\n                },\n                {\n                    \"title\": \"任务执行分析\",\n                    \"type\": \"task_analysis\",\n                    \"data_source\": \"workflow_tracker\",\n                    \"group_by\": \"agent_name\"\n                },\n                {\n                    \"title\": \"性能趋势\",\n                    \"type\": \"trend_analysis\",\n                    \"data_source\": \"performance_metrics\",\n                    \"metrics\": [\"average_task_duration\", \"throughput\"]\n                }\n            ]\n        }\n    \n    def _create_agent_health_template(self) -> Dict[str, Any]:\n        \"\"\"创建Agent健康报告模板\"\"\"\n        return {\n            \"name\": \"Agent健康报告\",\n            \"description\": \"各Agent运行状态和健康度分析\",\n            \"sections\": [\n                {\n                    \"title\": \"Agent状态概览\",\n                    \"type\": \"agent_overview\",\n                    \"data_source\": \"agent_health\"\n                },\n                {\n                    \"title\": \"Agent性能排行\",\n                    \"type\": \"agent_ranking\",\n                    \"data_source\": \"agent_metrics\",\n                    \"sort_by\": \"success_rate\"\n                },\n                {\n                    \"title\": \"故障分析\",\n                    \"type\": \"failure_analysis\",\n                    \"data_source\": \"agent_health\",\n                    \"time_range\": \"7d\"\n                }\n            ]\n        }\n    \n    def _create_error_analysis_template(self) -> Dict[str, Any]:\n        \"\"\"创建错误分析报告模板\"\"\"\n        return {\n            \"name\": \"错误分析报告\",\n            \"description\": \"系统错误和异常情况分析\",\n            \"sections\": [\n                {\n                    \"title\": \"错误统计\",\n                    \"type\": \"error_stats\",\n                    \"data_source\": \"error_tracker\",\n                    \"time_range\": \"7d\"\n                },\n                {\n                    \"title\": \"错误分类\",\n                    \"type\": \"error_classification\",\n                    \"data_source\": \"error_tracker\",\n                    \"group_by\": \"error_type\"\n                },\n                {\n                    \"title\": \"解决建议\",\n                    \"type\": \"recommendations\",\n                    \"data_source\": \"error_analyzer\"\n                }\n            ]\n        }\n    \n    def _generate_report_section(self, section: Dict[str, Any], \n                                parameters: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"生成报告章节\"\"\"\n        section_data = {\n            \"title\": section[\"title\"],\n            \"type\": section[\"type\"],\n            \"generated_at\": datetime.now(),\n            \"data\": {}\n        }\n        \n        data_source = self.data_sources.get(section[\"data_source\"])\n        if not data_source:\n            section_data[\"data\"] = {\"error\": \"数据源不可用\"}\n            return section_data\n        \n        try:\n            if section[\"type\"] == \"summary\":\n                section_data[\"data\"] = self._generate_summary_data(data_source, section)\n            elif section[\"type\"] == \"metrics_table\":\n                section_data[\"data\"] = self._generate_metrics_table(data_source, section)\n            elif section[\"type\"] == \"alert_summary\":\n                section_data[\"data\"] = self._generate_alert_summary(data_source, section)\n            else:\n                section_data[\"data\"] = {\"message\": \"暂不支持的报告类型\"}\n                \n        except Exception as e:\n            section_data[\"data\"] = {\"error\": str(e)}\n            logger.error(\"生成报告章节失败\", \n                        section_title=section[\"title\"],\n                        error=str(e))\n        \n        return section_data\n    \n    def _generate_summary_data(self, data_source: Any, \n                              section: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"生成摘要数据\"\"\"\n        summary = {}\n        \n        for metric in section.get(\"metrics\", []):\n            if hasattr(data_source, 'get_metric'):\n                summary[metric] = data_source.get_metric(metric)\n            else:\n                summary[metric] = \"N/A\"\n        \n        return summary\n    \n    def _generate_metrics_table(self, data_source: Any, \n                               section: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"生成指标表格\"\"\"\n        if hasattr(data_source, 'get_metrics_summary'):\n            return data_source.get_metrics_summary(\n                section.get(\"time_range\", \"24h\"),\n                section.get(\"metrics\", [])\n            )\n        else:\n            return {\"message\": \"数据源不支持指标表格\"}\n    \n    def _generate_alert_summary(self, data_source: Any, \n                               section: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"生成告警摘要\"\"\"\n        if hasattr(data_source, 'get_alert_summary'):\n            return data_source.get_alert_summary(\n                section.get(\"time_range\", \"24h\")\n            )\n        else:\n            return {\"message\": \"数据源不支持告警摘要\"}\n    \n    def export_dashboard(self, layout_id: str, filepath: str, format: str = \"html\"):\n        \"\"\"导出仪表板\"\"\"\n        dashboard_content = self.render_dashboard(layout_id, format)\n        \n        with open(filepath, 'w', encoding='utf-8') as f:\n            f.write(dashboard_content)\n        \n        logger.info(\"仪表板已导出\", \n                   layout_id=layout_id,\n                   filepath=filepath,\n                   format=format)\n    \n    def export_report(self, report: Dict[str, Any], filepath: str, format: str = \"json\"):\n        \"\"\"导出报告\"\"\"\n        if format == \"json\":\n            with open(filepath, 'w', encoding='utf-8') as f:\n                json.dump(report, f, indent=2, ensure_ascii=False, default=str)\n        elif format == \"html\":\n            html_content = self._render_report_html(report)\n            with open(filepath, 'w', encoding='utf-8') as f:\n                f.write(html_content)\n        else:\n            raise ValueError(f\"不支持的导出格式: {format}\")\n        \n        logger.info(\"报告已导出\", \n                   report_id=report[\"report_id\"],\n                   filepath=filepath,\n                   format=format)\n    \n    def _render_report_html(self, report: Dict[str, Any]) -> str:\n        \"\"\"渲染报告HTML\"\"\"\n        html_template = \"\"\"\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{title}</title>\n    <style>\n        body {{ font-family: 'Segoe UI', sans-serif; margin: 40px; line-height: 1.6; }}\n        .header {{ text-align: center; margin-bottom: 40px; }}\n        .section {{ margin: 30px 0; padding: 20px; border: 1px solid #ddd; border-radius: 8px; }}\n        .section-title {{ font-size: 20px; font-weight: 600; margin-bottom: 15px; color: #333; }}\n        table {{ width: 100%; border-collapse: collapse; margin: 15px 0; }}\n        th, td {{ border: 1px solid #ddd; padding: 12px; text-align: left; }}\n        th {{ background-color: #f8f9fa; font-weight: 600; }}\n        .metric {{ display: inline-block; margin: 10px; padding: 15px; background: #f8f9fa; border-radius: 6px; }}\n        .metric-value {{ font-size: 24px; font-weight: 700; color: #007bff; }}\n        .metric-label {{ font-size: 14px; color: #666; }}\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>{title}</h1>\n        <p>生成时间: {timestamp}</p>\n    </div>\n    {sections_html}\n</body>\n</html>\n        \"\"\"\n        \n        sections_html = \"\"\n        for section in report[\"sections\"]:\n            sections_html += f'<div class=\"section\">'\n            sections_html += f'<div class=\"section-title\">{section[\"title\"]}</div>'\n            \n            # 根据数据类型渲染内容\n            if isinstance(section[\"data\"], dict):\n                if \"error\" in section[\"data\"]:\n                    sections_html += f'<p style=\"color: red;\">错误: {section[\"data\"][\"error\"]}</p>'\n                else:\n                    for key, value in section[\"data\"].items():\n                        sections_html += f'<div class=\"metric\">'\n                        sections_html += f'<div class=\"metric-value\">{value}</div>'\n                        sections_html += f'<div class=\"metric-label\">{key}</div>'\n                        sections_html += f'</div>'\n            \n            sections_html += '</div>'\n        \n        return html_template.format(\n            title=f\"{report['template_name']} - {report['report_id']}\",\n            timestamp=report[\"generated_at\"].strftime(\"%Y-%m-%d %H:%M:%S\"),\n            sections_html=sections_html\n        )\n\n\nif __name__ == \"__main__\":\n    # 测试代码\n    def test_monitoring_dashboard():\n        dashboard = MonitoringDashboard(\"test_dashboard\")\n        \n        # 模拟数据源\n        class MockDataSource:\n            def get_metric(self, metric_name):\n                metrics = {\n                    \"system_health\": True,\n                    \"active_count\": 5,\n                    \"cpu_usage\": 45.2,\n                    \"memory_usage\": 67.8\n                }\n                return metrics.get(metric_name, 0)\n        \n        dashboard.register_data_source(\"system_metrics\", MockDataSource())\n        dashboard.register_data_source(\"workflow_metrics\", MockDataSource())\n        dashboard.register_data_source(\"performance_metrics\", MockDataSource())\n        \n        # 获取默认布局\n        layouts = dashboard.list_layouts()\n        print(f\"可用布局: {[layout.name for layout in layouts]}\")\n        \n        if layouts:\n            # 渲染第一个布局\n            layout_id = layouts[0].layout_id\n            html_content = dashboard.render_dashboard(layout_id, \"html\")\n            \n            # 保存到文件\n            with open(\"test_dashboard.html\", \"w\", encoding=\"utf-8\") as f:\n                f.write(html_content)\n            \n            print(\"仪表板已生成: test_dashboard.html\")\n            \n            # 生成JSON格式\n            json_content = dashboard.render_dashboard(layout_id, \"json\")\n            print(\"\\nJSON格式预览:\")\n            print(json_content[:500] + \"...\")\n        \n        # 生成报告\n        report = dashboard.generate_report(\"system_overview\")\n        print(f\"\\n报告已生成: {report['report_id']}\")\n        print(f\"报告章节数: {len(report['sections'])}\")\n    \n    test_monitoring_dashboard()\n"